let mockNotes = [
    {
        id: 1,
        title: "grocery list",
        fileType: ".txt",
        content: "1. Apples\n2. Beans x3 cans\n3. The entire state of Alabama\n4. A few rice",
        tags: ['reminders', 'list'],
        selected: true,
    },
    {
        id: 2,
        title: "movies to watch",
        fileType: ".md",
        content: "# Movies To Watch\n* Lord of the Rings trilogy\n* Star Wars movies\n* What About Bob?",
        tags: ['reminders', 'list'],
        selected: false,
    },
    {
        id: 3,
        title: "Binary Trees",
        fileType: ".md",
        content: "# C S 235 - Data Structures | Binary Trees\nA tree where each parent has at most 2 children.\n## Terminology:\nA binary tree is *connected*, *finite*, contains *no cycles*, and *no vertex of degree greater than three*.\n\n|term|definition|\n|---|---|\n|connected||\n|finite||\n|no cycles||\n|no vertex of degree > 3||\n|parent|the parent of a node is the second node on the path from the node to the root node of the tree, i.e. the next closest node to the root|\n|child|a child node is a node that extends from a parent node (not in the direction of the root)|\n|leaf node|a node with no children|\n|depth of a node|the length of the path from the node to the root of the tree|\n|ancestor and descendant|If a node, *w* is on the path from another node, *u*, to the root node, *r*, then *w* is called an **ancestor** of *u* and *u* is called a **descendant** of *w*.|\n|subtree|the subtree of a node is the tree formed form a node as if it were the root (i.e. the node and all it's descendants)|\n|height|the length of the longest possible path from a node to one of its decendants. Remember that paths include the node itself, so the height of a leaf node is still 1|\n## Binary Search Tree\nA binary search tree (BST) is a kind of binary tree in which each node, `u`, stores a data value, `u.x`. These data values obey the following property:\n* For a node, `u`, every data value stored in the subtree rooted at `u.left` is less than `u.x` and every data value stored in the subtree rooted at `u.right` is greater than `u.x`.\n### Searching for a node / data\nThese trees allow us to quickly search for a value. There are 4 cases that dictate the process. Let `u` be the current node being compared, and see the following:\n1. `u` is null, so the tree doesn't contain a node with a value of x - <mark style=\"background-color: rgba(255, 0, 0, 0.7);\">SEARCH TERMINATED</mark>.\n2. If `x==u.x`, then we've found the value - <mark style=\"background-color: rgba(255, 0, 0, 0.7)\">SEARCH TERMINATED</mark>.\n3. If `x<u.x`, then we continue our search to the left.\n4. If `x>u.x`, then we continue our search to the right.\n### Traversal\nThere are 3 orders in which traversals usually occur:\n1. Preorder  (visit, left, right)\n2. Inorder   (left, visit, right)\n3. Postorder (left, right, visit)\n\nThere is also what's called a *breadth first* search which visits nodes according to the depth they are from the root. So it visits the nodes by depth (node first, then all children of node, then all children of children of node, etc.). Visits are from left to right.\n\n#### Fun fact: the C++ `std::set` class uses a BST to store the values in the Set. `set`, unlike `unordered_set`, can iterate over values in sorted order using a set iterator.\n\n### Time Complexity\nDepending on the order in which elements were added to the BST, a new node can be added, and the tree can be searched in $\\mathcal{O}(\\log{n})$. The worst case occurs when elements are added in increasing or decreasing order, creating what's called a \"skinny tree\". In this case, the complexity is $\\mathcal{O}(n)$\n\n### Deleting values:\n* If the item to be removed is a leaf node, then its parent’s reference to it is set to NULL\n* If the item to be removed has only one child, then the grandparent references the remaining child instead of the child’s parent (the node we want to remove)\n* If the item to be removed has two children, replace it with the largest item in its left subtree\n\n## AVL Tree\nNamed after its two soviet inventors, George $\\text{A}$delson-$\\text{V}$elsky and Evgenii $\\text{L}$andis. The idea is that the binary search tree's time complexity for most/all operations worsens drastically if the tree is unbalanced (e.g. adding in ascending or descending order).\n\nIn order to maintain $\\mathcal{O}(\\log{n})$ time complexity for searches/insertions/deletions, the tree must maintain the following property:\n* The difference between the height of any two children must be less than 2.\n\nIf this requiremen is fulfilled, then the tree will be full and appoximately balanced.\n### Balance Factor\nThe balance factor of a node, $u$ , is the height difference between its left and right subtrees.\n$$\\text{BF}(u): = \\text{Height}(\\text{RightSubtree}(u)) - \\text{Height}(\\text{LeftSubtree}(u))$$\nA binary tree is defined to be an *AVL tree* $\\iff$ the invariant\n$$\\text{BF}(u)\\quad\\epsilon\\quad{}\\{-1,0,1\\}$$\nholds true $\\forall$ nodes in the tree.\n$$\\text{A node }u\\text{ is }\\begin{Bmatrix}\\text{left-heavy}&if&\\text{BF}(u)<0\\\\\\text{right-heavy}&if&\\text{BF}(u)>0\\\\\\text{balanced}&if&\\text{BF}(u)=0\\end{Bmatrix}$$\n### Rebalancing\nTo rebalance a tree that is left-heavy, \n1. Rotate the left child into the root node\n2. Make the right child of the left node into a child of the root node.\n![](@attachment/Clipboard_2021-03-15-12-10-28.png)\nThis is called doing a *right rotation* around node 20. It follows that when the node is right-heavy, doing a *left rotation* around the node will rebalance it.\n\nAt most, 2 rotations are required to convert a node whose subtrees have a height of $h$ and $h+2$ into a node whose subtrees each have a height of at most $h+1$.\n\n#### Algorithm\nIn this algorithm, we replace an 'old root' $-$ call it `old_root` $-$ (the node which the rotation is being done around) with a 'new root' $-$ call it `new_root` $-$ (the node to the left or right of the old root, depending on whether a right or left rotation is being done).\n1. Point a temporary variable to the `old_root`.\n2. Point `old_root.left` to `new_root.right`.\n3. Point `new_root.right` to `old_root`.\n4. Point `root` (the root reference for the tree object itself) to `new_root`.\n\nAnother set of instructions which says the same thing in a different way:\n\nThe steps for *left rotation* are the same for *right rotation* if you replace `left` with `right` in all instances.\n\n### Left Left, Right Right, Left Right, and Right Left trees\nIn any of these 4 terms, the direction refers to the balance of the node and the balance of the subnode. E.g. if a node is left-heavy and its left child has a negative balance, it is a Left Left tree. If a node is right-heavy and its left child has a negative balance, it's a Right Left tree. Solving these trees requires more steps. Well, not necessarily.\n\nFor a Left Left tree:\n* Rotate right\n\nFor a Right Right tree:\n* Rotate left\n\nFor a Left Right tree:\n* The idea is to make the Left Right tree into a Left Left tree by right rotating the left subtree of the given node. We can then solve it with a right rotation.\n1. Let `n` be the node that is out of balance.\n2. let `k` be `n.left`\n3. rotate left around `k` to create a Left Left tree.\n4. let `k` be the new child of `n`\n5. make the parent of `n` point to `k` instead of `n`\n6. Make `n`'s left child point to `k`'s right child.\n7. Make `k`'s right child pointer point to `n`.\n\nFor a Right Left tree:\n* Again, repeat the exact same steps for a Left Right tree, but replace \"left\" with \"right\" and \"right\" with \"left\".\n\nGenerally When Removing Nodes:\n* When removing nodes, always replace the deleted node with the highest value in the left subtree\n",
        tags: ['cs235', 'school'],
        selected: false,
    },
    {
        id: 4,
        title: "Exceptions in C++",
        fileType: ".md",
        content: "# C S 235 - Data Structures | Exceptions\nWe deal with exceptions using try/catch/throw syntax. e.g.\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid thrower()\n{\n    string reason = \"Something Bad Happened\";\n    throw reason;\n}\nint main()\n{\n   try {\n       thrower();\n   }\n   catch(string error) {\n       cout << \"Error: \" << error<<endl;\n   }\n}\n```\n\nYou can also use more general purpose exception catches:\n```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  try {\n        cout << \"Creating a vector of size 5... \\n\";\n        vector v(5);\n        cout << \"Accessing the 11th element of the vector...\\n\";\n        cout << v.at(10); // vector::at() throws std::out_of_range\n    } catch (const exception& e) { // caught by reference to base\n        cout << \" a standard exception was caught, with message '\"\n                  << e.what() << \"'\\n\";\n    }\n}\n```\n\nYou can also use exceptions to determine if parsing has failed through the iostream system.\n```cpp\n#include <iostream>\n#include <sstream>\n#include <stdexcept>\nusing namespace std;\n\nint main()\n{\n\tstringstream ss(\"Speedy R P\");\n\tstring name, type;\n\tint speed;\n\tss.exceptions(ios_base::failbit);\n\n\ttry {\n\t    ss >> name >> type >> speed;\n\t} \n\tcatch(ios_base::failure& ex) {\n\t    cout << \"Error \"<<ex.what()<<endl;\n\t}\n}\n```\n\nSee [this GitHub page](https://github.com/BYUCS235/exceptions).\n\n\n",
        tags: ['cs235', 'school', 'c++'],
        selected: false,
    },
    {
        id: 5,
        title: "Templates in C++",
        fileType: ".md",
        content: "# C S 235 - Data Structures | Templates\nTemplates allow us to create a class that can contain any other class. This is useful for things like dictionaries or vectors. Here’s a simple example:\n```c++\ntemplate <class T> // Declares a template and indicates that it'll be stored in a variable called 'T'.\n/*\nSo when we say something like 'T element' later on, it is declaring a variable called 'element' of type 'T'.\ne.g. if we do this with 'int' then 'T element;' would be 'int element;'\n*/\n\nclass MV {\n    T element;\n  public:\n    void put(T arg) {element = arg;};\n    T get() {return element;}\n};\n```\nHere's an example of using this template class:\n```c++\n#include <iostream>\n#include \"MV.h\"\nusing std::cout;\nusing std::endl;\nint main() {\n    MV<int> container; // Pass type \"int\" into the MV template\n    cout << \"Inserting\"<<endl;\n    container.put(5);\n    cout << \"Getting\"<<container.get()<<endl;\n    \n}\n```\nTo define multiple templates for one class (as with a map):\n```cpp\ntemplate<typename K, typename V>\n```\n",
        tags: ['cs235', 'school', 'c++'],
        selected: false,
    },
    {
        id: 6,
        title: "Document-Object Model",
        fileType: ".md",
        content: "# C S 260 - Web Programming | Document-Object Model\n## Document Object Model (DOM)\nThe DOM is a cross-platform and language-independent interface that treates an XML or HTML document as a tree stucture with each node of the tree representing a part of the document. The DOM represents a document with a logical tree. Each branch fo the tree ends in a node, and eaech node contains objects. It wasn't just designed for JavaScript, meaning that some things about it may not be beneficial for writing in JavaScript. But do not fret, people have developed libraries to overcome such disadvantages.\n\nTo access this tree, we use the global binding, `document`, whose `documentElement` property refers to teh object representing the `<html>` tag. It also has `head` and `body` elements. The root of the tree is at `document.documentElement`.\n\n### Finding elements\nThere are lots of ways to do this. Generally, you'll use something like:\n```js\ndocument.body.getElementsByTagName(\"a\")[0]; console.log(link.href)\n```\n\n### Creating Nodes\n#### Creating an Array from a collection (like those returned in `getElementsBy____(in)`)\n```js\nlet arrayish = {0: \"one\", 1: \"two\", length: 2};\nlet array = Array.from(arrayish);\nconsole.log(array.map(s => s.toUpperCase()));\n// → [\"ONE\", \"TWO\"]\n```\n\n#### `createElement()`\ntakes in a tag name and returns a new empty node of the given type.\n\n#### `elt`\nCreates an element node and treats the rest of its arguments as children to that node. E.g. used to add an attribution to a quote:\n```html\n<blockquote id=\"quote\">\n  No book can ever be finished. While working on it we learn\n  just enough to find it immature the moment we turn away\n  from it.\n</blockquote>\n\n<script>\n  function elt(type, ...children) {\n    let node = document.createElement(type);\n    for (let child of children) {\n      if (typeof child != \"string\") node.appendChild(child);\n      else node.appendChild(document.createTextNode(child));\n    }\n    return node;\n  }\n\n  document.getElementById(\"quote\").appendChild(\n    elt(\"footer\", \"—\",\n        elt(\"strong\", \"Karl Popper\"),\n        \", preface to the second edition of \",\n        elt(\"em\", \"The Open Society and Its Enemies\"),\n        \", 1950\"));\n</script>\n```\n\n### Attributes:\nSome element attributes, such as href for links, can be accessed through a property of the same name on the element’s DOM object. This is the case for most commonly used standard attributes.\n\nBut HTML allows you to set any attribute you want on nodes. This can be useful because it allows you to store extra information in a document. If you make up your own attribute names, though, such attributes will not be present as properties on the element’s node. Instead, you have to use the getAttribute and setAttribute methods to work with them.\n```html\n<p data-classified=\"secret\">The launch code is 00000000.</p>\n<p data-classified=\"unclassified\">I have two feet.</p>\n\n<script>\n  let paras = document.body.getElementsByTagName(\"p\");\n  for (let para of Array.from(paras)) {\n    if (para.getAttribute(\"data-classified\") == \"secret\") {\n      para.remove();\n    }\n  }\n</script>\n```\nIf you make up attributes, it's conventional to prefix them with `data-`\n\n### Layout\nYou can use `offsetWidth` and `offsetHeight` to acces the space an element takes up *in pixels*.\nYou can use `clientWidth` and `clientHeight` to get the size of the space *inside* the element, ignoring the width of the border.\n\nThe most effective way to get the location of an element on the screen is by using `getBoundingClientRect()` which returns an object with `top`, `bottom`, `left`, and `right` properties which describe the pixel positions of the sides of the element relative to the top left of the screen. \n\nIf you want them relative to the whole document, you must add the current scroll position, which you can find in the `pageXOffset` and `pageYOffset` bindings.\n\n### Style\nYou can use a node's `style` property to access any style property that you could with css. The property holds an object that has properties for every possible style property.\n\n#### Cascading Style\nCascading style means there's more than one rule to define the style, in which case the most recent style is used (unless one is marked with `!important` in which case the most recent `!important` style is used). -- **i'm not sure if that's the correct way to mark something as important**.\n\n#### Query Selectors\nYou can use these (e.g. `.` and `#`) to find DOM elements. e.g. the `querySelectorAll()` function takes a selector string and returns a `NodeList` with results. code:\n```html\n<p>And if you go chasing\n  <span class=\"animal\">rabbits</span></p>\n<p>And you know you're going to fall</p>\n<p>Tell 'em a <span class=\"character\">hookah smoking\n  <span class=\"animal\">caterpillar</span></span></p>\n<p>Has given you the call</p>\n\n<script>\n  function count(selector) {\n    return document.querySelectorAll(selector).length;\n  }\n  console.log(count(\"p\"));           // All <p> elements\n  // → 4\n  console.log(count(\".animal\"));     // Class animal\n  // → 2\n  console.log(count(\"p .animal\"));   // Animal inside of <p>\n  // → 2\n  console.log(count(\"p > .animal\")); // Direct child of <p>\n  // → 1\n</script>\n```\n\n### Positioning and Animation\n`position` has the default value of `static` meaning that they just sit in place. When it is set to `relative`, the elements can be moved relative to the `top` and `left` style properties. When it is `absolute`, the element is removed from the normla document flow - meaning it no longer takes up space. We can use these things to create an animation.\n```html\n<p style=\"text-align: center\">\n  <img src=\"img/cat.png\" style=\"position: relative\">\n</p>\n<script>\n  let cat = document.querySelector(\"img\");\n  let angle = Math.PI / 2;\n  function animate(time, lastTime) {\n    if (lastTime != null) {\n      angle += (time - lastTime) * 0.001;\n    }\n    cat.style.top = (Math.sin(angle) * 20) + \"px\";\n    cat.style.left = (Math.cos(angle) * 200) + \"px\";\n    requestAnimationFrame(newTime => animate(newTime, time));\n  }\n  requestAnimationFrame(animate);\n</script>\n```\n\n### examples:\n#### Replacing all `<img>` tags with their `alt` text\n```html\n<p>The <img src=\"img/cat.png\" alt=\"Cat\"> in the\n  <img src=\"img/hat.png\" alt=\"Hat\">.</p>\n\n<p><button onclick=\"replaceImages()\">Replace</button></p>\n\n<script>\n  function replaceImages() {\n    let images = document.body.getElementsByTagName(\"img\");\n    for (let i = images.length - 1; i >= 0; i--) {\n      let image = images[i];\n      if (image.alt) {\n        let text = document.createTextNode(image.alt);\n        image.parentNode.replaceChild(text, image);\n      }\n    }\n  }\n</script>\n```\n\n",
        tags: ['cs260', 'school'],
        selected: false,
    },
    {
        id: 7,
        title: "Intro to Git",
        fileType: ".md",
        content: "# C S 260 - Web Programming | Git\n\nTo setup a remote repository:\n```bash\ngit remote add origin git@github.com:zappala/gitpractice\ngit push -u origin master\n```\nHelpful reference commands:\n\nInitializing a new github repository. (Only needs to be run once, at the start of a new project). Replace \"git@github.com:zappala/gitpractice\" with your project ssh reference.\n\n```bash\ngit init\ngit remote add origin git@github.com:zappala/portfolio\n```\n\nAdding all changes in a directory, creating a commit, and pushing to master. (This needs to be done everytime you change files on your local computer and want to push those changes to github)\n\n```bash\ngit add .\ngit commit -m \"Type Commit Message Here\"\ngit push origin master\n```\n\nCloning a repository (run once, when you want to save a new repository to your computer)\n\n```bash\ngit clone git@github.com:zappala/gitpractice\n```\n\nUpdating a cloned repository (after changes are pushed to github and you want to pull them down)\n\n```bash\ngit pull origin master\n```\n\n<hr>\n\n## Git workflow:\nOnce you have changed files that you want to add to the repository, you have to add them to staging with \n```bash\ngit add <files here, use . if you want to use all files>\n```\nThen you can commit your changes with\n```bash\ngit commit -m \"commit message here\"\n```\nFinally, you will push them to the remote repository with\n```bash\ngit push\n```\nThis works for now but we may need to learn about using branches as we expand.\n\n\n",
        tags: ['cs260', 'school'],
        selected: false,
    },
    {
        id: 8,
        title: "Web Design Principles",
        fileType: ".html",
        content: "# C S 260 - Web Programming | Web Design Principles\n<ul>\n<li>\n<strong>Usability:&nbsp;</strong>help users find what they want quickly <br>\n<ul>\n<li><a href=\"https://blog.hubspot.com/blog/tabid/6307/bid/30557/6-guidelines-for-exceptional-website-design-and-usability.aspx\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>8 Guidelines</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n<li><a href=\"https://www.smashingmagazine.com/2008/01/10-principles-of-effective-web-design/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>10 Principles</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n<li><a href=\"https://www.nngroup.com/articles/top-10-mistakes-web-design/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Top 10 Mistakes</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n<li><a href=\"https://www.smashingmagazine.com/2009/02/9-common-usability-blunders/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>9 Mistakes</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Navigation:&nbsp;</strong>make the menu system simple and consistent\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2011/06/planning-and-implementing-website-navigation/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Planning and ImplementingSome&nbsp;</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Focus:&nbsp;</strong>draw attention to important places\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2015/02/design-principles-dominance-focal-points-hierarchy/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Focal points</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Spacing:&nbsp;</strong>use white space effectively to make the site clearer <br>\n<ul>\n<li><a href=\"https://webdesignledger.com/21-inspiring-examples-of-white-space-in-web-design/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>21 Examples</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Color:&nbsp;</strong>use color effectively to make the site appealing\n<ul>\n<li><a href=\"https://webdesign.tutsplus.com/articles/an-introduction-to-color-theory-for-web-designers--webdesign-1437\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Color theory</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n<li><a href=\"https://www.canva.com/learn/website-color-schemes/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>50 Examples</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Graphics:&nbsp;</strong>use graphics to explain and provide variety\n<ul>\n<li><a href=\"https://1stwebdesigner.com/web-design-images/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Image usability guide</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Typography:&nbsp;</strong>make it pleasant to read\n<ul>\n<li><a href=\"https://practicaltypography.com/summary-of-key-rules.html\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Key rules of typography</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n<li><a href=\"http://typographyhandbook.com/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Typography handbook</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Alignment:&nbsp;</strong>use&nbsp;straight lines\n<ul>\n<li><a href=\"https://tympanus.net/codrops/2012/06/19/line-that-up-proper-alignment-in-web-design/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Alignment in web design</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Consistency:&nbsp;</strong>everything should match\n<ul>\n<li><a href=\"https://webdesign.tutsplus.com/articles/building-consistency-and-relationships-into-your-designs--webdesign-14849\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Building Consistency</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Mobile First:&nbsp;</strong>design for mobile, expand to desktop\n<ul>\n<li><a href=\"https://mayvendev.com/blog/mobilefirst\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Mobile first design</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n<li>\n<strong>Engagement</strong>\n<ul>\n<li><a href=\"http://goodui.org/\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Designing for high conversion</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>\n</li>\n</ul>\n",
        tags: ['cs260', 'school'],
        selected: false,
    },
]

export default mockNotes;